prog meu_programa;

** ERROR TEST
**@@@@@@@

** CONST DECLARATION 
const bla : real = 4;
const ble,bli : inteiro = 2;

** STRUCT DECLARATION
tipo TDU := registro 
        var nome : texto; 
        var idade : inteiro
    fim;  
    
** ARRAY DECLARATION
tipo arr1 := vetor[3 .. 5] de texto;
tipo arr2 := vetor[1 .. 5] de real = ( 1.0, 2.0, 3.0, 4.0, 5.0 );


** ENUM DECLARATION
tipo enum := (jan, fev, mar);

** RANGE DECLARATION
tipo range := jan .. mar;

** JUMP DECLARATION 
rotulo jump;
rotulo pirueta, salto;

** VAR DECLARATION 
var tdu : TDU;
var i : inteiro;
var blo : logico;
var blu, pla : texto;
var nome_vetor : arr1;
var ple : texto = 'oi';
var plu : inteiro = 0x0001;
var pli : real = 4.0 + 20.0;
var nome_negocio : vetor[3..5] de texto = ('aaa', 'bbb', 'ccc'); 

** EMPTY PROC 
proc procedimento() 
inicio 
fim;

** TEST PROC 
proc procedimento2( ref t1 : texto , i1 : inteiro ) 
  var p1 : inteiro;
  
  ** SUB PROGRAM DECLARATION INSIDE OTHER TEST
  proc procedimento( ) 
  
    var p1 : texto;
    tipo tda := registro
        var dna : vetor[3..5] de texto = ('aaa', 'bbb', 'ccc'); 
        var alelo : texto
    fim;
    var a : tda;
    
    inicio
        ** SCOPE VAR REDEFINITION TEST
        p1 = 't';
        a.alelo = ple;
        a.dna[2] = 'bbc'
    fim;
  
inicio 
    
    ** PARENT SCOPE TEST
    blo = falso;
    
	** IF TEST
    se ((4 > 1) && (2 <= 3)) entao inicio
		se ((1 >= 1) || (ble==bli) || (1 != plu)) entao 
		    escreva('4')
	fim
	senao se (1 == 2) entao inicio
		escreva('3')
	fim
fim;

** EMPTY FUNCTION 
func funcao(n1 : inteiro) : inteiro
inicio 
    retorne 4 * n1
fim;

** TEST FUNCTION 
func operation(n1 : real, op : texto, n2 : real) : real 
inicio
	** CASE TEST
	caso (op) seja
        '+' : retorne n1 + n2;
        '-' : retorne n1 - n2;
        '*' : retorne n1 * n2;
        '/' : retorne n1 / n2
    fim;
    retorne 2.0
fim;

(*    MAIN CODE   *)
inicio
	** USER TYPE TEST
    tdu.nome = 'teste';
    
    ** VECTOR TEST
    nome_negocio[0] = 'teste';

    nome_vetor[4] = 'teste2';
**  nome_negocio = nome_vetor **ERROR;

    ** LABEL TEST
    salto:
    
    ** EXPRESSION TEST
    plu = (ble*bli)/4 + plu - 200 + funcao(ble);
    
    ** FUNC CALL TEST
	pli = 3 + operation(4.0, '+', 3.0);

	** PROC CALL TEST
	procedimento();
	
	** FOR TEST
	para (i = 0; i <= 5; i = i + 1) faca inicio
        escreva('bla')
    fim;
    
    ** CALL LABEL TEST
    pule salto;
    
    ** WHILE TEST
    enquanto (1 == 0) faca inicio
    	escreva('teste')
    fim;
    
    ** DO TEST
    repita 
    	leiaReal(pli)
    ate (2 < 1)    
fim