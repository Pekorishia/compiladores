prog meu_programa;

** ERROR TEST
**@@@@@@@

** CONST DECLARATION 
const bla : real = 4;
const ble,bli : inteiro = 2;

** STRUCT DECLARATION
tipo TDU := registro 
        var nome : texto; 
        var idade : inteiro
    fim;  

** VAR DECLARATION 
var tdu : TDU;
var blo,blu : logico;
var blu, pla : texto;
var ple : texto = 'oi';
var pli : real = 4 + 20;
var plu : inteiro = 0x0001;
var nome_negocio : vetor[3..5] de texto = ('aaa', 'bbb', 'ccc'); 

** ARRAY DECLARATION
tipo arr1 := vetor[4 .. 10] de texto;
tipo arr2 := vetor[1 .. 5] de real = ( 1, 2, 3, 4, 5 );

** ENUM DECLARATION
tipo enum := (jan, fev, mar);

** RANGE DECLARATION
tipo range := jan .. mar;

** JUMP DECLARATION 
rotulo jump;
rotulo pirueta, salto;

** EMPTY PROC 
proc procedimento() 
inicio 
fim;

** TEST PROC 
proc procedimento2( ref t1 : texto , i1 : inteiro ) 
  var p1 : inteiro;
inicio 
	** IF TEST
    se (4 > 1) entao inicio
		se (1 > 1) entao 
		    escreva(4)
		(*senao se (1 == 2) entao inicio
		    escreva('')
	    fim*)
	fim
	senao se (1 == 2) entao inicio
		escreva(2)
	fim
fim;

** EMPTY FUNCTION 
func funcao() : inteiro
inicio 
fim;

** TEST FUNCTION 
func operation(n1 : real, op : texto, n2 : real) : real 
inicio
	** CASE TEST
	caso (op) seja
        '+' : retorne sum(n1, n2);
        '-' : retorne subtraction(n1, n2);
        '*' : retorne multiplication(n1, n2);
        '/' : retorne division(n1, n2)
    fim
fim;


(*    MAIN CODE   *)
inicio
	** USER TYPE TEST
    tdu.name = 'teste';
    
    ** VECTOR TEST
    arr1[0] = 'teste';
    
    ** LABEL TEST
    salto:
    
    ** FUNC CALL TEST
	pli = operation(4, '+', 3);
	
	** PROC CALL TEST
	procedimento();
	
	** FOR TEST
	para (i = 0; i <= 5; i = i + 1) faca inicio
        escreva(i)
    fim;
    
    ** WHILE TEST
    enquanto (1 == 0) faca inicio
    	escreva('teste')
    fim;
    
    ** DO TEST
    repita 
    	leia(pli)
    ate (2 < 1)
fim