program 'FINAL' 
block 'senao' ';' 'FINAL' 'fim' 'ate' ',' ')' 
prevdec 'inicio' ';' 
declaration ';' 
arraydec ';' 'fim' 
arraydecaux ';' 'fim' 
rangelist ']' 
rangelistaux ']' 
range ',' ']' 
vardec ';' 'fim' 
varconstruction ';' 'fim' 
decwithassign ';' 'fim' 
usertype ';' 
typedec ';' 
typedecaux ';' 
vardeclist 'fim' 
vardeclistaux 'fim' 
labeldec ';' 
constdec ';' 
abstractiondec ';' 
procdec ';' 
funcdec ';' 
parameters ')' 
paramsaux ')' 
paramslist ')' 
prevcommand 'fim' 
callcommand 'senao' ';' 'fim' 'ate' ',' ')' 
commands 'fim' 'ate' ',' ')' 
commandsaux 'fim' 'ate' ',' ')' 
callidbegin 'senao' ';' 'fim' 'ate' ',' ')' 
calllabel 'senao' ';' 'fim' 'ate' ',' ')' 
write 'senao' ';' 'fim' 'ate' ',' ')' 
read 'senao' ';' 'fim' 'ate' ',' ')' 
return 'senao' ';' 'fim' 'ate' ',' ')' 
loop 'senao' ';' 'fim' 'ate' ',' ')' 
forloop 'senao' ';' 'fim' 'ate' ',' ')' 
forstruct ')' 
prevfor ';' 
varassignlist ';' 
varassignlistaux ';' 
posfor ')' 
posforaux ')' 
posforaux2 ')' 
whileloop 'senao' ';' 'fim' 'ate' ',' ')' 
repeatloop 'senao' ';' 'fim' 'ate' ',' ')' 
conditional 'senao' ';' 'fim' 'ate' ',' ')' 
ifcond 'senao' ';' 'fim' 'ate' ',' ')' 
ifcondaux 'senao' ';' 'fim' 'ate' ',' ')' 
casecond 'senao' ';' 'fim' 'ate' ',' ')' 
casecondaux 'senao' ';' 'fim' 'ate' ',' ')' 
caselist 'fim' 'senao' 
caselistaux 'fim' 'senao' 
caselistaux2 'fim' 'senao' 
caseclause ';' 'fim' 'senao' 
expressionlist ']' ')' 
expressionlistaux ']' ')' 
expression ')' ',' ';' 'senao' 'fim' 'ate' 
orfact ')' ',' ';' 'senao' 'fim' 'ate' 
andfact 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
andfactaux 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
notfact 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
expreq 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
expreqaux 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
numericexpr '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
exprsum '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
exprmul '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
exprmulaux '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
simpleexpr '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
optrange '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
optunary '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
optbracket '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' 'senao' 'fim' 'ate' 
idlist ')' ':' ';' 
idlistaux ')' ':' ';' 
type ',' ';' '=' ')' 'fim' 
literal ',' '..' ':' '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ';' 'senao' 'fim' 'ate' ']' 
atomic ',' '..' ':' '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ';' 'senao' 'fim' 'ate' ']' 
id ':' ':=' ',' '..' '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ';' 'senao' 'fim' 'ate' ']' 
idaux ':' ':=' ',' '..' '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ';' 'senao' 'fim' 'ate' ']' 
atomiclist ':' 
atomiclistaux ':'