'prog'	'id'	';'	'inicio'	'fim'	'vetor'	'['	']'	'de'	'='	'('	')'	','	'..'	'var'	':'	'tipo'	':='	'registro'	'value'	'rotulo'	'const'	'proc'	'func'	'ref'	'pare'	'continue'	'pule'	'escreva'	'leia'	'retorne'	'para'	'faca'	'enquanto'	'repita'	'ate'	'se'	'entao'	'senao'	'caso'	'seja'	'or'	'and'	'~'	'=='	'!='	'>'	'<'	'>='	'<='	'+'	'-'	'*'	'/'	'inteiro'	'real'	'logico'	'texto'	'literalint'	'literalreal'	'literallogico'	'literaltexto'	'.'	$
program -> 'prog' 'id' ';' prevdec block																																																															
			block -> 'inicio' prevcommand 'fim'																																																												
		prevdec -> ''	prevdec -> ''											prevdec -> declaration ';' prevdec		prevdec -> declaration ';' prevdec				prevdec -> declaration ';' prevdec	prevdec -> declaration ';' prevdec	prevdec -> declaration ';' prevdec	prevdec -> declaration ';' prevdec																																								
														declaration -> vardec		declaration -> usertype				declaration -> labeldec	declaration -> constdec	declaration -> abstractiondec	declaration -> abstractiondec																																								
					arraydec -> 'vetor' '[' rangelist ']' 'de' type arraydecaux																																																										
		arraydecaux -> ''		arraydecaux -> ''					arraydecaux -> '=' '(' expressionlist ')'																																																						
	rangelist -> range rangelistaux																																																									rangelist -> range rangelistaux	rangelist -> range rangelistaux	rangelist -> range rangelistaux	rangelist -> range rangelistaux		
							rangelistaux -> ''					rangelistaux -> ',' range rangelistaux																																																			
	range -> atomic '..' atomic																																																									range -> atomic '..' atomic	range -> atomic '..' atomic	range -> atomic '..' atomic	range -> atomic '..' atomic		
														vardec -> 'var' idlist ':' varconstruction																																																	
	varconstruction -> type decwithassign				varconstruction -> arraydec																																																	varconstruction -> type decwithassign	varconstruction -> type decwithassign	varconstruction -> type decwithassign	varconstruction -> type decwithassign						
		decwithassign -> ''		decwithassign -> ''					decwithassign -> '=' expr																																																						
																usertype -> 'tipo' 'id' typedec																																															
					typedec -> arraydec												typedec -> ':=' typedecaux																																														
	typedecaux -> range									typedecaux -> '(' idlist ')'								typedecaux -> 'registro' vardeclist 'fim'	typedecaux -> 'value'																																							typedecaux -> range	typedecaux -> range	typedecaux -> range	typedecaux -> range		
														vardeclist -> vardec vardeclistaux																																																	
		vardeclistaux -> ';' vardec vardeclistaux		vardeclistaux -> ''																																																											
																				labeldec -> 'rotulo' idlist																																											
																					constdec -> 'const' 'id' '=' expr																																										
																						abstractiondec -> procdec	abstractiondec -> funcdec																																								
																						procdec -> 'proc' 'id' '(' parameters ')' prevdec ';' block																																									
																							funcdec -> 'func' 'id' '(' parameters ')' ':' type ';' prevdec block																																								
	parameters -> paramsaux										parameters -> ''													parameters -> paramsaux																																							
	paramsaux -> 'id' ':' type paramslist																							paramsaux -> 'ref' 'id' ':' type paramslist																																							
											paramslist -> ''	paramslist -> ',' paramslist																																																			
	prevcommand -> commands		prevcommand -> commands	prevcommand -> ''																					prevcommand -> commands	prevcommand -> commands	prevcommand -> commands	prevcommand -> commands	prevcommand -> commands	prevcommand -> commands	prevcommand -> commands		prevcommand -> commands	prevcommand -> commands		prevcommand -> commands			prevcommand -> commands																								
	callcommand -> id callidbegin		callcommand -> block																						callcommand -> 'pare'	callcommand -> 'continue'	callcommand -> calllabel	callcommand -> write	callcommand -> read	callcommand -> return	callcommand -> loop		callcommand -> loop	callcommand -> loop		callcommand -> conditional			callcommand -> conditional																								
	commands -> callcommand commandsaux		commands -> callcommand commandsaux																						commands -> callcommand commandsaux	commands -> callcommand commandsaux	commands -> callcommand commandsaux	commands -> callcommand commandsaux	commands -> callcommand commandsaux	commands -> callcommand commandsaux	commands -> callcommand commandsaux		commands -> callcommand commandsaux	commands -> callcommand commandsaux		commands -> callcommand commandsaux			commands -> callcommand commandsaux																								
		commandsaux -> ';' commands		commandsaux -> ''							commandsaux -> ''	commandsaux -> ''																							commandsaux -> ''																												
		callidbegin -> ''		callidbegin -> ''							callidbegin -> ''	callidbegin -> ''			callidbegin -> ':' callcommand		callidbegin -> ':=' expr																		callidbegin -> ''			callidbegin -> ''																									
																											calllabel -> 'pule' 'id'																																				
																												write -> 'escreva' '(' expressionlist ')'																																			
																													read -> 'leia' '(' expressionlist ')'																																		
																														return -> 'retorne' expr																																	
																															loop -> forloop		loop -> whileloop	loop -> repeatloop																													
																															forloop -> 'para' '(' forstruct ')' 'faca' callcommand																																
	forstruct -> prevfor ';' expr ';' posfor	forstruct -> prevfor ';' expr ';' posfor									forstruct -> prevfor ';' expr ';' posfor																																																				
	prevfor -> varassignlist	prevfor -> ''																																																													
	varassignlist -> 'id' '=' expr varassignlistaux																																																														
		varassignlistaux -> ''										varassignlistaux -> ',' 'id' '=' expr varassignlistaux																																																			
	posfor -> posforaux		posfor -> posforaux								posfor -> ''														posfor -> posforaux	posfor -> posforaux	posfor -> posforaux	posfor -> posforaux	posfor -> posforaux	posfor -> posforaux	posfor -> posforaux		posfor -> posforaux	posfor -> posforaux		posfor -> posforaux			posfor -> posforaux																								
	posforaux -> commands posforaux2		posforaux -> commands posforaux2																						posforaux -> commands posforaux2	posforaux -> commands posforaux2	posforaux -> commands posforaux2	posforaux -> commands posforaux2	posforaux -> commands posforaux2	posforaux -> commands posforaux2	posforaux -> commands posforaux2		posforaux -> commands posforaux2	posforaux -> commands posforaux2		posforaux -> commands posforaux2			posforaux -> commands posforaux2																								
											posforaux2 -> ''	posforaux2 -> ',' commands posforaux2																																																			
																																	whileloop -> 'enquanto' '(' expr ')' 'faca' callcommand																														
																																		repeatloop -> 'repita' commands 'ate' expr																													
																																				conditional -> ifcond			conditional -> casecond																								
																																				ifcond -> 'se' '(' expr ')' 'entao' callcommand ifcondaux																											
		ifcondaux -> ''		ifcondaux -> ''							ifcondaux -> ''	ifcondaux -> ''																							ifcondaux -> ''			ifcondaux -> 'senao' callcommand																									
																																																															
																																							casecond -> 'caso' '(' expr ')' 'seja' caselist casecondaux																								
				casecondaux -> 'fim'																																		casecondaux -> 'senao' commands 'fim'																									
	caselist -> caseclause caselistaux																																																									caselist -> caseclause caselistaux	caselist -> caseclause caselistaux	caselist -> caseclause caselistaux	caselist -> caseclause caselistaux		
		caselistaux -> ';' caselistaux2		caselistaux -> ''																																		caselistaux -> ''																									
	caselistaux2 -> caseclause caselistaux			caselistaux2 -> ''																																		caselistaux2 -> ''																				caselistaux2 -> caseclause caselistaux	caselistaux2 -> caseclause caselistaux	caselistaux2 -> caseclause caselistaux	caselistaux2 -> caseclause caselistaux		
	caseclause -> atomiclist ':' callcommand																																																									caseclause -> atomiclist ':' callcommand	caseclause -> atomiclist ':' callcommand	caseclause -> atomiclist ':' callcommand	caseclause -> atomiclist ':' callcommand		
	expressionlist -> expr expressionlistaux									expressionlist -> expr expressionlistaux																																	expressionlist -> expr expressionlistaux							expressionlist -> expr expressionlistaux	expressionlist -> expr expressionlistaux							expressionlist -> expr expressionlistaux	expressionlist -> expr expressionlistaux	expressionlist -> expr expressionlistaux	expressionlist -> expr expressionlistaux		
												expressionlistaux -> ',' expr expressionlistaux																																																			
	expr -> andfact orfact									expr -> andfact orfact																																	expr -> andfact orfact							expr -> andfact orfact	expr -> andfact orfact							expr -> andfact orfact	expr -> andfact orfact	expr -> andfact orfact	expr -> andfact orfact		
		orfact -> ''		orfact -> ''							orfact -> ''	orfact -> ''																							orfact -> ''			orfact -> ''			orfact -> 'or' andfact orfact																						
	andfact -> notfact andfactaux									andfact -> notfact andfactaux																																	andfact -> notfact andfactaux							andfact -> notfact andfactaux	andfact -> notfact andfactaux							andfact -> notfact andfactaux	andfact -> notfact andfactaux	andfact -> notfact andfactaux	andfact -> notfact andfactaux		
		andfactaux -> ''		andfactaux -> ''							andfactaux -> ''	andfactaux -> ''																							andfactaux -> ''			andfactaux -> ''			andfactaux -> ''	andfactaux -> 'and' notfact andfactaux																					
	notfact -> expreq									notfact -> expreq																																	notfact -> '~' expreq							notfact -> expreq	notfact -> expreq							notfact -> expreq	notfact -> expreq	notfact -> expreq	notfact -> expreq		
	expreq -> numericexpr expreqaux									expreq -> numericexpr expreqaux																																								expreq -> numericexpr expreqaux	expreq -> numericexpr expreqaux							expreq -> numericexpr expreqaux	expreq -> numericexpr expreqaux	expreq -> numericexpr expreqaux	expreq -> numericexpr expreqaux		
		expreqaux -> ''		expreqaux -> ''							expreqaux -> ''	expreqaux -> ''																							expreqaux -> ''			expreqaux -> ''			expreqaux -> ''	expreqaux -> ''		expreqaux -> '==' numericexpr expreqaux	expreqaux -> '!=' numericexpr expreqaux	expreqaux -> '>' numericexpr expreqaux	expreqaux -> '<' numericexpr expreqaux	expreqaux -> '>=' numericexpr expreqaux	expreqaux -> '<=' numericexpr expreqaux														
	numericexpr -> exprmul exprsum									numericexpr -> exprmul exprsum																																								numericexpr -> exprmul exprsum	numericexpr -> exprmul exprsum							numericexpr -> exprmul exprsum	numericexpr -> exprmul exprsum	numericexpr -> exprmul exprsum	numericexpr -> exprmul exprsum		
		exprsum -> ''		exprsum -> ''							exprsum -> ''	exprsum -> ''																							exprsum -> ''			exprsum -> ''			exprsum -> ''	exprsum -> ''		exprsum -> ''	exprsum -> ''	exprsum -> ''	exprsum -> ''	exprsum -> ''	exprsum -> ''	exprsum -> '+' exprmul exprsum	exprsum -> '-' exprmul exprsum												
	exprmul -> simpleexpr exprmulaux									exprmul -> simpleexpr exprmulaux																																								exprmul -> simpleexpr exprmulaux	exprmul -> simpleexpr exprmulaux							exprmul -> simpleexpr exprmulaux	exprmul -> simpleexpr exprmulaux	exprmul -> simpleexpr exprmulaux	exprmul -> simpleexpr exprmulaux		
		exprmulaux -> ''		exprmulaux -> ''							exprmulaux -> ''	exprmulaux -> ''																							exprmulaux -> ''			exprmulaux -> ''			exprmulaux -> ''	exprmulaux -> ''		exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> ''	exprmulaux -> '*' simpleexpr exprmulaux	exprmulaux -> '/' simpleexpr exprmulaux										
	simpleexpr -> atomic optrange									simpleexpr -> '(' expr ')'																																								simpleexpr -> optunary optbracket	simpleexpr -> optunary optbracket							simpleexpr -> atomic optrange	simpleexpr -> atomic optrange	simpleexpr -> atomic optrange	simpleexpr -> atomic optrange		
		optrange -> ''		optrange -> ''							optrange -> ''	optrange -> ''	optrange -> '..' atomic																						optrange -> ''			optrange -> ''			optrange -> ''	optrange -> ''		optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''	optrange -> ''										
																																																		optunary -> '+'	optunary -> '-'												
	optbracket -> atomic									optbracket -> '(' expr ')'																																																optbracket -> atomic	optbracket -> atomic	optbracket -> atomic	optbracket -> atomic		
	idlist -> 'id' idlistaux																																																														
		idlistaux -> ''									idlistaux -> ''	idlistaux -> ',' 'id' idlistaux			idlistaux -> ''																																																
	type -> 'id'																																																					type -> 'inteiro'	type -> 'real'	type -> 'logico'	type -> 'texto'						
																																																										literal -> 'literalint'	literal -> 'literalreal'	literal -> 'literallogico'	literal -> 'literaltexto'		
	atomic -> id																																																									atomic -> literal	atomic -> literal	atomic -> literal	atomic -> literal		
	id -> 'id' idaux																																																														
		idaux -> ''		idaux -> ''		idaux -> '[' expressionlist ']'	idaux -> ''			idaux -> '(' expressionlist ')'	idaux -> ''	idaux -> ''	idaux -> ''		idaux -> ''		idaux -> ''																		idaux -> ''			idaux -> ''			idaux -> ''	idaux -> ''		idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''	idaux -> ''									idaux -> '.' id	
	atomiclist -> atomic atomiclistaux																																																									atomiclist -> atomic atomiclistaux	atomiclist -> atomic atomiclistaux	atomiclist -> atomic atomiclistaux	atomiclist -> atomic atomiclistaux		
												atomiclistaux -> ',' atomic atomiclistaux			atomiclistaux -> ''																																																
