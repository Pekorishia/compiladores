'prog' 'prog' 
'id' 'id' 
';' ';' 
'inicio' 'inicio' 
'fim' 'fim' 
'' '' 
'vetor' 'vetor' 
'[' '[' 
']' ']' 
'de' 'de' 
'=' '=' 
'(' '(' 
')' ')' 
',' ',' 
'..' '..' 
'var' 'var' 
':' ':' 
'tipo' 'tipo' 
':=' ':=' 
'registro' 'registro' 
'..' '..' 
'' '' 
'rotulo' 'rotulo' 
'const' 'const' 
'proc' 'proc' 
'func' 'func' 
'ref' 'ref' 
'pare' 'pare' 
'continue' 'continue' 
'pule' 'pule' 
'escreva' 'escreva' 
'leia' 'leia' 
'retorne' 'retorne' 
'para' 'para' 
'faca' 'faca' 
'enquanto' 'enquanto' 
'repita' 'repita' 
'ate' 'ate' 
'se' 'se' 
'entao' 'entao' 
'senao' 'senao' 
'caso' 'caso' 
'seja' 'seja' 
'or' 'or' 
'and' 'and' 
'~' '~' 
'==' '==' 
'!=' '!=' 
'>' '>' 
'<' '<' 
'>=' '>=' 
'<=' '<=' 
'+' '+' 
'-' '-' 
'*' '*' 
'/' '/' 
'inteiro' 'inteiro' 
'real' 'real' 
'logico' 'logico' 
'texto' 'texto' 
'literalint' 'literalint' 
'literalreal' 'literalreal' 
'literallogico' 'literallogico' 
'literaltexto' 'literaltexto' 
'.' '.' 
program 'prog' 
block 'inicio' 
prevdec '' 'var' 'rotulo' 'tipo' 'const' 'proc' 'func' 
arraydec 'vetor' 
arraydecaux '=' '' 
rangelistaux ',' '' 
vardec 'var' 
decwithassign '=' '' 
usertype 'tipo' 
typedec ':=' 'vetor' 
typedecaux 'registro' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
typedecauxrange '..' '' 
vardeclistaux ';' '' 
labeldec 'rotulo' 
constdec 'const' 
procdec 'proc' 
funcdec 'func' 
parameters '' 'id' 'ref' 
paramsaux 'id' 'ref' 
paramslist ',' '' 
prevcommand '' 'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
callcommand 'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
commandsaux ';' '' 
callidbegin ':' ':=' '' 
calllabel 'pule' 
write 'escreva' 
read 'leia' 
return 'retorne' 
forloop 'para' 
forstruct ';' '' 'id' 
prevfor '' 'id' 
varassignlist 'id' 
varassignlistaux ',' '' 
posfor '' 'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
posforaux2 ',' '' 
whileloop 'enquanto' 
repeatloop 'repita' 
ifcond 'se' 
ifcondaux 'senao' '' 
casecond 'caso' 
casecondaux 'fim' 'senao' 
caselistaux ';' '' 
caselistaux2 '' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
expressionlistaux ',' 
orfact 'or' '' 
andfactaux 'and' '' 
notfact '~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expreqaux '==' '!=' '>' '<' '>=' '<=' '' 
exprsum '+' '-' '' 
exprmulaux '*' '/' '' 
simpleexpr '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
optrange '..' '' 
optunary '-' '+' 
optbracket '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
idlist 'id' 
idlistaux ',' '' 
type 'inteiro' 'real' 'logico' 'texto' 'id' 
literal 'literalint' 'literalreal' 'literallogico' 'literaltexto' 
id 'id' 
idaux '[' '.' '(' '' 
atomiclistaux ',' '' 
declaration 'var' 'rotulo' 'tipo' 'const' 'proc' 'func' 
varconstruction 'inteiro' 'real' 'logico' 'texto' 'id' 'vetor' 
vardeclist 'var' 
abstractiondec 'proc' 'func' 
loop 'para' 'repita' 'enquanto' 
conditional 'se' 'caso' 
atomic 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
range 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
atomiclist 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
rangelist 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
caseclause 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
commands 'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
caselist 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
exprmul '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
posforaux 'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
numericexpr '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expreq '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
andfact '~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expr '~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expressionlist '~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+'