program -> "prog" "id" ";" prevdec block 
block -> "inicio" prevcommand "fim" 
prevdec -> declaration ";" prevdec | LAMBDA

declaration -> vardec | usertype | labeldec | constdec | abstractiondec 

arraydec -> "vetor" "[" rangelist "]" "de" type arraydecaux 
arraydecaux -> "=" "(" expressionlist ")" | LAMBDA
rangelist -> range rangelistaux 
rangelistaux -> "," range rangelistaux |  LAMBDA   
range -> atomic ".." atomic 
vardec -> "var" idlist ":" varconstruction
varconstruction ->  type decwithassign | arraydec
 
decwithassign -> "=" expr | LAMBDA
usertype -> "tipo" "id" ":=" typedec
typedec -> arraydec | typedecaux
typedecaux -> "registro" vardeclist "fim" | "(" idlist ")" | atomic typedecauxrange 

typedecauxrange -> '..' atomic
typedecauxrange -> ''

vardeclist -> vardec vardeclistaux 
vardeclistaux -> ";" vardec vardeclistaux | LAMBDA
labeldec -> "rotulo" idlist
constdec -> "const" "id" "=" expr
abstractiondec -> procdec | funcdec
procdec -> "proc" "id" "(" parameters ")" prevdec block
funcdec -> "func" "id" "(" parameters ")" ":" type ";" prevdec block
parameters -> paramsaux | LAMBDA
paramsaux -> "id" ":" type paramslist   | "ref" "id" ":" type paramslist 
paramslist -> "," paramsaux | LAMBDA
prevcommand -> commands | LAMBDA
callcommand ->  "pare" | write | read  | loop | return |  "continue" | id callidbegin | calllabel | conditional | block
commands -> callcommand commandsaux

commandsaux -> ";"  commands | LAMBDA

callidbegin  -> ":" callcommand  | ":=" expr | LAMBDA

calllabel -> "pule" "id"
write -> "escreva" "(" expressionlist ")"
read -> "leia" "(" expressionlist ")"
return -> "retorne" expr
loop -> forloop | whileloop | repeatloop
forloop -> "para" "(" forstruct ")" "faca" callcommand
forstruct -> prevfor ";" expr ";" posfor
prevfor -> varassignlist | LAMBDA

varassignlist -> "id" "=" expr varassignlistaux
varassignlistaux -> "," "id" "=" expr varassignlistaux | LAMBDA

posfor -> posforaux | LAMBDA
posforaux ->  commands posforaux2
posforaux2 -> "," commands posforaux2 | LAMBDA
whileloop -> "enquanto" "(" expr ")" "faca" callcommand
repeatloop -> "repita" commands "ate" expr
conditional -> ifcond | casecond
ifcond ->  "se" "(" expr ")" "entao" callcommand ifcondaux 
ifcondaux -> "senao" callcommand | LAMBDA

casecond -> "caso" "(" expr ")" "seja" caselist casecondaux
   
casecondaux -> "fim"| "senao" commands "fim"
   
caselist -> caseclause caselistaux
caselistaux -> ";" caselistaux2   | LAMBDA
caselistaux2 ->  caseclause caselistaux | LAMBDA
caseclause -> atomiclist ":" callcommand 

expressionlist -> expr expressionlistaux
expressionlistaux -> "," expr expressionlistaux | LAMBDA

expr -> andfact orfact
orfact -> "or" andfact orfact 
orfact -> LAMBDA

andfact -> notfact andfactaux
andfactaux -> "and" notfact andfactaux
andfactaux -> LAMBDA

notfact -> "~" expreq
notfact -> expreq

expreq -> numericexpr expreqaux
expreqaux -> "==" numericexpr expreqaux 
expreqaux -> "!=" numericexpr expreqaux 
expreqaux -> ">" numericexpr expreqaux  
expreqaux -> "<" numericexpr expreqaux  
expreqaux -> ">=" numericexpr expreqaux 
expreqaux -> "<=" numericexpr expreqaux 
expreqaux -> LAMBDA 

numericexpr -> exprmul exprsum
exprsum -> "+" exprmul exprsum 
exprsum -> "-" exprmul exprsum 
exprsum -> LAMBDA 

exprmul -> simpleexpr exprmulaux
exprmulaux -> "*" simpleexpr exprmulaux
exprmulaux -> "/" simpleexpr exprmulaux
exprmulaux -> LAMBDA

simpleexpr -> atomic optrange
simpleexpr -> optunary optbracket
simpleexpr -> "(" expr ")"

optrange -> ".." atomic 
optrange -> LAMBDA

optunary -> "-" 
optunary -> "+"

optbracket -> "(" expr  ")" 
optbracket -> atomic

idlist -> "id" idlistaux 

idlistaux -> "," "id" idlistaux |LAMBDA
type -> "inteiro" | "real" | "logico" | "texto" | "id" 
literal -> "literalint" | "literalreal" | "literallogico" | "literaltexto"  
atomic -> literal | id
   
id -> "id" idaux
   
idaux -> "[" expressionlist "]" |  "." id |  "(" expressionlist ")" | LAMBDA
   
atomiclist -> atomic atomiclistaux
atomiclistaux ->  "," atomic atomiclistaux | LAMBDA
