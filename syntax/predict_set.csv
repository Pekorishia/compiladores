program → 'prog' 'id' ';' prevdec block 	'prog' 
block → 'inicio' prevcommand 'fim' 	'inicio' 
prevdec → declaration ';' prevdec 	'var' 'rotulo' 'tipo' 'const' 'proc' 'func' 
prevdec → '' 	'inicio' 
declaration → vardec 	'var' 
declaration → usertype 	'tipo' 
declaration → labeldec 	'rotulo' 
declaration → constdec 	'const' 
declaration → abstractiondec 	'proc' 'func' 
arraydec → 'vetor' '[' rangelist ']' 'de' type arraydecaux 	'vetor' 
arraydecaux → '=' '(' expressionlist ')' 	'=' 
arraydecaux → '' 	';' 'fim' 
rangelist → range rangelistaux 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
rangelistaux → ',' range rangelistaux 	',' 
rangelistaux → '' 	'' 
range → atomic '..' atomic 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
vardec → 'var' idlist ':' varconstruction 	'var' 
varconstruction → type decwithassign 	'inteiro' 'real' 'logico' 'texto' 'id' 
varconstruction → arraydec 	'vetor' 
decwithassign → '=' expr 	'=' 
decwithassign → '' 	';' 'fim' 
usertype → 'tipo' 'id' ':=' typedec 	'tipo' 
typedec → arraydec 	'vetor' 
typedec → typedecaux 	'registro' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
typedecaux → 'registro' vardeclist 'fim' 	'registro' 
typedecaux → '(' idlist ')' 	'(' 
typedecaux → atomic typedecauxrange 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
typedecauxrange → '..' atomic 	'..' 
typedecauxrange → '' 	'' 
vardeclist → vardec vardeclistaux 	'var' 
vardeclistaux → ';' vardec vardeclistaux 	';' 
vardeclistaux → '' 	'fim' 
labeldec → 'rotulo' idlist 	'rotulo' 
constdec → 'const' 'id' '=' expr 	'const' 
abstractiondec → procdec 	'proc' 
abstractiondec → funcdec 	'func' 
procdec → 'proc' 'id' '(' parameters ')' prevdec block 	'proc' 
funcdec → 'func' 'id' '(' parameters ')' ':' type ';' prevdec block 	'func' 
parameters → paramsaux 	'id' 'ref' 
parameters → '' 	')' 
paramsaux → 'id' ':' type paramslist 	'id' 
paramsaux → 'ref' 'id' ':' type paramslist 	'ref' 
paramslist → ',' paramsaux 	',' 
paramslist → '' 	')' 
prevcommand → commands 	'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
prevcommand → '' 	'fim' 
callcommand → 'pare' 	'pare' 
callcommand → write 	'escreva' 
callcommand → read 	'leia' 
callcommand → loop 	'para' 'repita' 'enquanto' 
callcommand → return 	'retorne' 
callcommand → 'continue' 	'continue' 
callcommand → id callidbegin 	'id' 
callcommand → calllabel 	'pule' 
callcommand → conditional 	'se' 'caso' 
callcommand → block 	'inicio' 
commands → callcommand commandsaux 	'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
commandsaux → ';' commands 	';' 
commandsaux → '' 	'fim' 'ate' ',' ')' 
callidbegin → ':' callcommand 	':' 
callidbegin → ':=' expr 	':=' 
callidbegin → '' 	'senao' ';' 'fim' 'ate' ',' ')' 
calllabel → 'pule' 'id' 	'pule' 
write → 'escreva' '(' expressionlist ')' 	'escreva' 
read → 'leia' '(' expressionlist ')' 	'leia' 
return → 'retorne' expr 	'retorne' 
loop → forloop 	'para' 
loop → whileloop 	'enquanto' 
loop → repeatloop 	'repita' 
forloop → 'para' '(' forstruct ')' 'faca' callcommand 	'para' 
forstruct → prevfor ';' expr ';' posfor 	'id' ';' 
prevfor → varassignlist 	'id' 
prevfor → '' 	';' 
varassignlist → 'id' '=' expr varassignlistaux 	'id' 
varassignlistaux → ',' 'id' '=' expr varassignlistaux 	',' 
varassignlistaux → '' 	';' 
posfor → posforaux 	'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
posfor → '' 	')' 
posforaux → commands posforaux'pare' 'continue' 'escreva' 'leia' 'retorne' 'pule' 'inicio' 'para' 'repita' 'enquanto' 'se' 'caso' 'id' 
posforaux2 → ',' commands posforaux',' 
posforaux2 → '' 	')' 
whileloop → 'enquanto' '(' expr ')' 'faca' callcommand 	'enquanto' 
repeatloop → 'repita' commands 'ate' expr 	'repita' 
conditional → ifcond 	'se' 
conditional → casecond 	'caso' 
ifcond → 'se' '(' expr ')' 'entao' callcommand ifcondaux 	'se' 
ifcondaux → 'senao' callcommand 	'senao' 
ifcondaux → '' 	'senao' ';' 'fim' 'ate' ',' ')' 
casecond → 'caso' '(' expr ')' 'seja' caselist casecondaux 	'caso' 
casecondaux → 'fim' 	'fim' 
casecondaux → 'senao' commands 'fim' 	'senao' 
caselist → caseclause caselistaux 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
caselistaux → ';' caselistaux';' 
caselistaux → '' 	'fim' 'senao' 
caselistaux2 → caseclause caselistaux 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
caselistaux2 → '' 	'fim' 'senao' 
caseclause → atomiclist ':' callcommand 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
expressionlist → expr expressionlistaux 	'~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expressionlistaux → ',' expr expressionlistaux 	',' 
expressionlistaux → '' 	'' ')' 
expr → andfact orfact 	'~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
orfact → 'or' andfact orfact 	'or' 
orfact → '' 	')' ',' ';' '' 'senao' 'fim' 'ate' 
andfact → notfact andfactaux 	'~' '(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
andfactaux → 'and' notfact andfactaux 	'and' 
andfactaux → '' 	'or' ')' ',' ';' '' 'senao' 'fim' 'ate' 
notfact → '~' expreq 	'~' 
notfact → expreq 	'(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expreq → numericexpr expreqaux 	'(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
expreqaux → '==' numericexpr expreqaux 	'==' 
expreqaux → '!=' numericexpr expreqaux 	'!=' 
expreqaux → '>' numericexpr expreqaux 	'>' 
expreqaux → '<' numericexpr expreqaux 	'<' 
expreqaux → '>=' numericexpr expreqaux 	'>=' 
expreqaux → '<=' numericexpr expreqaux 	'<=' 
expreqaux → '' 	'and' 'or' ')' ',' ';' '' 'senao' 'fim' 'ate' 
numericexpr → exprmul exprsum 	'(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
exprsum → '+' exprmul exprsum 	'+' 
exprsum → '-' exprmul exprsum 	'-' 
exprsum → '' 	'==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' '' 'senao' 'fim' 'ate' 
exprmul → simpleexpr exprmulaux 	'(' 'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' '-' '+' 
exprmulaux → '*' simpleexpr exprmulaux 	'*' 
exprmulaux → '/' simpleexpr exprmulaux 	'/' 
exprmulaux → '' 	'+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' '' 'senao' 'fim' 'ate' 
simpleexpr → atomic optrange 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
simpleexpr → optunary optbracket 	'-' '+' 
simpleexpr → '(' expr ')' 	'(' 
optrange → '..' atomic 	'..' 
optrange → '' 	'*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ',' ';' '' 'senao' 'fim' 'ate' 
optunary → '-' 	'-' 
optunary → '+' 	'+' 
optbracket → '(' expr ')' 	'(' 
optbracket → atomic 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
idlist → 'id' idlistaux 	'id' 
idlistaux → ',' 'id' idlistaux 	',' 
idlistaux → '' 	')' ':' ';' 
type → 'inteiro' 	'inteiro' 
type → 'real' 	'real' 
type → 'logico' 	'logico' 
type → 'texto' 	'texto' 
type → 'id' 	'id' 
literal → 'literalint' 	'literalint' 
literal → 'literalreal' 	'literalreal' 
literal → 'literallogico' 	'literallogico' 
literal → 'literaltexto' 	'literaltexto' 
atomic → literal 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 
atomic → id 	'id' 
id → 'id' idaux 	'id' 
idaux → '[' expressionlist ']' 	'' 
idaux → '.' id 	'.' 
idaux → '(' expressionlist ')' 	'(' 
idaux → '' 	':' ':=' ',' '..' '..' '' '*' '/' '+' '-' '==' '!=' '>' '<' '>=' '<=' 'and' 'or' ')' ';' '' 'senao' 'fim' 'ate' 
atomiclist → atomic atomiclistaux 	'literalint' 'literalreal' 'literallogico' 'literaltexto' 'id' 
atomiclistaux → ',' atomic atomiclistaux 	',' 
atomiclistaux → '' 	':'