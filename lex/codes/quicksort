prog quicksort;

tipo Vetor = vetor de inteiro;

proc troca(var c1, c2 : inteiro);
var c : inteiro; 
inicio
    c := c1;
    c1 := c2;
    c2 := c;
fim;

func particiona(ref minha_lista : Vetor, ini_vet : inteiro, fim_vet : inteiro) : inteiro ;
var i, j, pivo : inteiro;
inicio
    pivo := minha_lista[fim_vet];
    i := ini_vet-1;
    para (j := ini_vet; j <= fim_vet-1; j := j+1) fazer inicio
        se (minha_lista[j] < pivo) entao inicio
            i := i+1;
            troca(minha_lista[i], minha_lista[j]);
        fim;
    fim;
    se (minha_lista[fim_vet] < minha_lista[i+1]) entao inicio
        troca(minha_lista[fim_vet], minha_lista[i+1]);
    fim;

    retorne i+1;
fim;


proc quicksort(var minha_lista : Vetor; ini_vet : inteiro, fim_vet : inteiro) ;
var pivo : inteiro;
inicio
    se (ini_vet < fim_vet) entao inicio
        pivo := particiona(minha_lista, ini_vet, fim_vet);
        quicksort(minha_lista, ini_vet, pivo-1);
        quicksort(minha_lista, pivo+1, fim_vet);        
    fim;
fim;

var i, len : inteiro;
var lista_ord : Vetor;
inicio
    escrever('Insira tamanho do vetor:');
    ler(len);
    InicializarTamanho(lista_ord, len);
    para (i := 0; i <= len-1; i := i + 1) fazer inicio
        ler(lista_ord[i]);
    fim;

    quicksort(lista_ord, 0, len-1);

    escrever('Lista ordenada:');
    para (i := 0; i <= len-1; i := i + 1) fazer inicio
        escrever(lista_ord[i], ' ');
    fim;
fim